# 不要嫌弃这个加密方法简陋，主要是为了节省资源消耗程度
from binascii import  a2b_hex as a2b
from base64 import b64encode as b64en, b64decode as b64de

# 初始向量
iv = [
    0x8A, 0x89, 0x4D, 0x89, 0x2F, 0x40, 0x6A, 0x07, 0xB0, 0xC0, 0xAE, 0x52, 0xE7, 0x30, 0x58, 0x7B,
    0x74, 0xF3, 0x61, 0x5B, 0x61, 0x29, 0xA2, 0x94, 0x2C, 0x91, 0x5C, 0x75, 0x00, 0x6D, 0x97, 0xB0,
    0xF3, 0x74, 0x4E, 0xAB, 0x2B, 0xF9, 0x7D, 0xC9, 0xD7, 0x0E, 0x22, 0xAC, 0xAA, 0x28, 0x4E, 0xE3,
    0x90, 0xAD, 0x0E, 0x8A, 0xF1, 0x96, 0x64, 0xA3, 0x50, 0xCF, 0x14, 0xD5, 0x43, 0x30, 0xF3, 0x03,
    0xBD, 0x0B, 0x15, 0xAB, 0xD1, 0x9A, 0xE9, 0xC4, 0xC0, 0xE7, 0x5D, 0x46, 0x83, 0xC1, 0x5E, 0xC5,
    0x5A, 0x62, 0x5D, 0x29, 0x6F, 0x33, 0xB5, 0xF7, 0x29, 0x41, 0x2B, 0x5B, 0x4C, 0x39, 0x18, 0x7E,
    0x7A, 0x0E, 0xCF, 0xB5, 0x09, 0x7C, 0x8E, 0xFC, 0x01, 0x2E, 0x61, 0x8A, 0xD7, 0x0E, 0xA6, 0xF6,
    0xDB, 0x52, 0xB6, 0x27, 0xB0, 0x68, 0x84, 0xC7, 0xAA, 0x8B, 0x22, 0xCF, 0x0A, 0xD1, 0x9E, 0x77,
    0x3C, 0x62, 0xB6, 0x9C, 0xA1, 0x4C, 0xD9, 0x38, 0xB5, 0xB6, 0x0D, 0x22, 0xA4, 0x9E, 0xA7, 0x25,
    0xF9, 0xCA, 0x70, 0x97, 0xDB, 0xFD, 0x65, 0x98, 0x2B, 0xE1, 0xFA, 0xE0, 0x1B, 0xDB, 0x22, 0xF1,
    0x20, 0xC0, 0xC5, 0xC8, 0x7E, 0x23, 0x40, 0x0C, 0x28, 0xE4, 0x6B, 0xBC, 0x3E, 0xE6, 0x54, 0xA6,
    0x31, 0xF0, 0x79, 0xFF, 0xCE, 0xCE, 0x24, 0x88, 0x85, 0x25, 0xCE, 0xB7, 0x3A, 0x62, 0xAD, 0x56,
    0x7E, 0x3A, 0xCA, 0x0B, 0x6B, 0x18, 0x00, 0xBA, 0xA5, 0x7B, 0xE4, 0x4A, 0xFB, 0xCA, 0xEE, 0x91,
    0x08, 0x32, 0xE8, 0x57, 0x9A, 0x04, 0xBE, 0x71, 0xAE, 0xA1, 0xB0, 0xB4, 0xBE, 0x8C, 0xF5, 0x99,
    0x9F, 0xD6, 0xF8, 0xC2, 0xC9, 0x3E, 0x5D, 0x58, 0xF9, 0x54, 0xD1, 0x7F, 0x09, 0x49, 0xD3, 0xDA,
    0x8F, 0x44, 0x68, 0xF7, 0xD9, 0xBC, 0x1B, 0xF0, 0x20, 0x51, 0xE7, 0x9F, 0xAD, 0xEF, 0x50, 0x22
]

# 填充密钥内容至256字节
def FILL_KEY(key :str):
    key = list(key.encode('UTF-8'))
    key_n = len(key)
    if key_n < 256:
        padding = [
            0x0f, 0x1f, 0x2f, 0x3f, 0x4f, 0x5f, 0x6f, 0x7f,
            0x8f, 0x9f, 0xaf, 0xbf, 0xcf, 0xdf, 0xef, 0xff
        ]
        fill_index = 0
        for x in range(256 - key_n):
            if fill_index == 16:
                fill_index = 0
            key.append(padding[fill_index])
            fill_index += 1
    return key

def encrypt(p :bytes, k :bytes, iv :bytes):
    p_n = len(p)
    p = list(p)
    k = FILL_KEY(k)
    index = 0
    for x in range(p_n):
        if index == 256:
            index = 0
        p[x] = "%02X"%(p[x] ^ k[index] ^ iv[255 - index])
        index += 1
    return b64en(a2b("".join(p)))

def decrypt(c :bytes, k :bytes, iv :bytes):
    c = list(b64de(c))
    c_n = len(c)
    k = FILL_KEY(k)
    index = 0
    for x in range(c_n):
        if index == 256:
            index = 0
        c[x] = "%02X"%(c[x] ^ k[index] ^ iv[255 - index])
        index += 1
    return a2b("".join(c))






